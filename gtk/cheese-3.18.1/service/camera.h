/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SERVICE_CAMERA_H__
#define __SERVICE_CAMERA_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Camera.Manager */

#define GC_TYPE_MANAGER (gc_manager_get_type ())
#define GC_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GC_TYPE_MANAGER, GcManager))
#define GC_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GC_TYPE_MANAGER))
#define GC_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GC_TYPE_MANAGER, GcManagerIface))

struct _GcManager;
typedef struct _GcManager GcManager;
typedef struct _GcManagerIface GcManagerIface;

struct _GcManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_client) (
    GcManager *object,
    GDBusMethodInvocation *invocation);

};

GType gc_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gc_manager_interface_info (void);
guint gc_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gc_manager_complete_get_client (
    GcManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *client);



/* D-Bus method calls: */
void gc_manager_call_get_client (
    GcManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gc_manager_call_get_client_finish (
    GcManager *proxy,
    gchar **out_client,
    GAsyncResult *res,
    GError **error);

gboolean gc_manager_call_get_client_sync (
    GcManager *proxy,
    gchar **out_client,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GC_TYPE_MANAGER_PROXY (gc_manager_proxy_get_type ())
#define GC_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GC_TYPE_MANAGER_PROXY, GcManagerProxy))
#define GC_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GC_TYPE_MANAGER_PROXY, GcManagerProxyClass))
#define GC_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GC_TYPE_MANAGER_PROXY, GcManagerProxyClass))
#define GC_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GC_TYPE_MANAGER_PROXY))
#define GC_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GC_TYPE_MANAGER_PROXY))

typedef struct _GcManagerProxy GcManagerProxy;
typedef struct _GcManagerProxyClass GcManagerProxyClass;
typedef struct _GcManagerProxyPrivate GcManagerProxyPrivate;

struct _GcManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GcManagerProxyPrivate *priv;
};

struct _GcManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gc_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GcManagerProxy, g_object_unref)
#endif

void gc_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GcManager *gc_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GcManager *gc_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gc_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GcManager *gc_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GcManager *gc_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GC_TYPE_MANAGER_SKELETON (gc_manager_skeleton_get_type ())
#define GC_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GC_TYPE_MANAGER_SKELETON, GcManagerSkeleton))
#define GC_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GC_TYPE_MANAGER_SKELETON, GcManagerSkeletonClass))
#define GC_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GC_TYPE_MANAGER_SKELETON, GcManagerSkeletonClass))
#define GC_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GC_TYPE_MANAGER_SKELETON))
#define GC_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GC_TYPE_MANAGER_SKELETON))

typedef struct _GcManagerSkeleton GcManagerSkeleton;
typedef struct _GcManagerSkeletonClass GcManagerSkeletonClass;
typedef struct _GcManagerSkeletonPrivate GcManagerSkeletonPrivate;

struct _GcManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GcManagerSkeletonPrivate *priv;
};

struct _GcManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gc_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GcManagerSkeleton, g_object_unref)
#endif

GcManager *gc_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Camera.Client */

#define GC_TYPE_CLIENT (gc_client_get_type ())
#define GC_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GC_TYPE_CLIENT, GcClient))
#define GC_IS_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GC_TYPE_CLIENT))
#define GC_CLIENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GC_TYPE_CLIENT, GcClientIface))

struct _GcClient;
typedef struct _GcClient GcClient;
typedef struct _GcClientIface GcClientIface;

struct _GcClientIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_show_chooser) (
    GcClient *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_image_data) (GcClient *object);

  void (*user_done) (
    GcClient *object,
    gboolean arg_photo_taken,
    const gchar *arg_image_data);

};

GType gc_client_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gc_client_interface_info (void);
guint gc_client_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gc_client_complete_show_chooser (
    GcClient *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gc_client_emit_user_done (
    GcClient *object,
    gboolean arg_photo_taken,
    const gchar *arg_image_data);



/* D-Bus method calls: */
void gc_client_call_show_chooser (
    GcClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gc_client_call_show_chooser_finish (
    GcClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gc_client_call_show_chooser_sync (
    GcClient *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *gc_client_get_image_data (GcClient *object);
gchar *gc_client_dup_image_data (GcClient *object);
void gc_client_set_image_data (GcClient *object, const gchar *value);


/* ---- */

#define GC_TYPE_CLIENT_PROXY (gc_client_proxy_get_type ())
#define GC_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GC_TYPE_CLIENT_PROXY, GcClientProxy))
#define GC_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GC_TYPE_CLIENT_PROXY, GcClientProxyClass))
#define GC_CLIENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GC_TYPE_CLIENT_PROXY, GcClientProxyClass))
#define GC_IS_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GC_TYPE_CLIENT_PROXY))
#define GC_IS_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GC_TYPE_CLIENT_PROXY))

typedef struct _GcClientProxy GcClientProxy;
typedef struct _GcClientProxyClass GcClientProxyClass;
typedef struct _GcClientProxyPrivate GcClientProxyPrivate;

struct _GcClientProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GcClientProxyPrivate *priv;
};

struct _GcClientProxyClass
{
  GDBusProxyClass parent_class;
};

GType gc_client_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GcClientProxy, g_object_unref)
#endif

void gc_client_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GcClient *gc_client_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GcClient *gc_client_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gc_client_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GcClient *gc_client_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GcClient *gc_client_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GC_TYPE_CLIENT_SKELETON (gc_client_skeleton_get_type ())
#define GC_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GC_TYPE_CLIENT_SKELETON, GcClientSkeleton))
#define GC_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GC_TYPE_CLIENT_SKELETON, GcClientSkeletonClass))
#define GC_CLIENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GC_TYPE_CLIENT_SKELETON, GcClientSkeletonClass))
#define GC_IS_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GC_TYPE_CLIENT_SKELETON))
#define GC_IS_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GC_TYPE_CLIENT_SKELETON))

typedef struct _GcClientSkeleton GcClientSkeleton;
typedef struct _GcClientSkeletonClass GcClientSkeletonClass;
typedef struct _GcClientSkeletonPrivate GcClientSkeletonPrivate;

struct _GcClientSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GcClientSkeletonPrivate *priv;
};

struct _GcClientSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gc_client_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GcClientSkeleton, g_object_unref)
#endif

GcClient *gc_client_skeleton_new (void);


G_END_DECLS

#endif /* __SERVICE_CAMERA_H__ */
